
Question 1: What is the output of \dt?
======================================

dvdrental=# \dt
              List of relations
 Schema |       Name       | Type  |  Owner
--------+------------------+-------+----------
 public | actor            | table | postgres
 public | address          | table | postgres
 public | category         | table | postgres
 public | city             | table | postgres
 public | country          | table | postgres
 public | customer         | table | postgres
 public | film             | table | postgres
 public | film_actor       | table | postgres
 public | film_category    | table | postgres
 public | inventory        | table | postgres
 public | language         | table | postgres
 public | payment          | table | postgres
 public | payment_p2007_01 | table | postgres
 public | payment_p2007_02 | table | postgres
 public | payment_p2007_03 | table | postgres
 public | payment_p2007_04 | table | postgres
 public | payment_p2007_05 | table | postgres
 public | payment_p2007_06 | table | postgres
 public | rental           | table | postgres
 public | staff            | table | postgres
 public | store            | table | postgres
(21 rows)

dvdrental=#


















Question 2: What is the schema for the customer table?
======================================================

dvdrental=# \d customer
                                          Table "public.customer"
   Column    |            Type             |                           Modifiers
-------------+-----------------------------+----------------------------------------------------------------
 customer_id | integer                     | not null default nextval('customer_customer_id_seq'::regclass)
 store_id    | smallint                    | not null
 first_name  | character varying(45)       | not null
 last_name   | character varying(45)       | not null
 email       | character varying(50)       |
 address_id  | smallint                    | not null
 activebool  | boolean                     | not null default true
 create_date | date                        | not null default ('now'::text)::date
 last_update | timestamp without time zone | default now()
 active      | integer                     |
Indexes:
    "customer_pkey" PRIMARY KEY, btree (customer_id)
    "idx_fk_address_id" btree (address_id)
    "idx_fk_store_id" btree (store_id)
    "idx_last_name" btree (last_name)
Foreign-key constraints:
    "customer_address_id_fkey" FOREIGN KEY (address_id) REFERENCES address(address_id) ON UPDATE CASCADE ON DELETE RESTRICT
    "customer_store_id_fkey" FOREIGN KEY (store_id) REFERENCES store(store_id) ON UPDATE CASCADE ON DELETE RESTRICT
Referenced by:
    TABLE "payment" CONSTRAINT "payment_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON UPDATE CASCADE ON DELETE RESTRICT
    TABLE "payment_p2007_01" CONSTRAINT "payment_p2007_01_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
    TABLE "payment_p2007_02" CONSTRAINT "payment_p2007_02_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
    TABLE "payment_p2007_03" CONSTRAINT "payment_p2007_03_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
    TABLE "payment_p2007_04" CONSTRAINT "payment_p2007_04_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
    TABLE "payment_p2007_05" CONSTRAINT "payment_p2007_05_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
    TABLE "payment_p2007_06" CONSTRAINT "payment_p2007_06_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
    TABLE "rental" CONSTRAINT "rental_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customer(customer_id) ON UPDATE CASCADE ON DELETE RESTRICT
Triggers:
    last_updated BEFORE UPDATE ON customer FOR EACH ROW EXECUTE PROCEDURE last_updated()

dvdrental=#














Question 3: What similarities do you see in the explain plans for these 3 queries below?
========================================================================================
The similarity between the 3 queries is that each query does a sequential and Filtered scan across all known
tables.  All 6 payment tables are scanned, filterad and then results are appended and finally aggregated.

The predicated queries show an aggregate function where the values of multiple rows are grouped together 
as input based upon the requested predicate (WHERE) to answer the query.

NOTES: Cost metric is shown as 2 numbers. A start-up cost before the first row can be returned, and the 
total cost to return all the rows. 



QUERY #1
--------
dvdrental=# EXPLAIN SELECT customer_id, first_name, last_name FROM customer;
                         QUERY PLAN
------------------------------------------------------------
 Seq Scan on customer  (cost=0.00..14.99 rows=599 width=17)
(1 row)




QUERY #2
--------
dvdrental=# EXPLAIN SELECT customer_id, first_name, last_name FROm custo...
                ^IN SELECT count(*) FROM payment WHERE amount <=1 OR amount >=8;
                                       QUERY PLAN
-----------------------------------------------------------------------------------------
 Aggregate  (cost=433.58..433.59 rows=1 width=0)
   ->  Append  (cost=0.00..420.63 rows=5178 width=0)
         ->  Seq Scan on payment  (cost=0.00..29.95 rows=739 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
         ->  Seq Scan on payment_p2007_01 payment  (cost=0.00..26.36 rows=266 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
         ->  Seq Scan on payment_p2007_02 payment  (cost=0.00..51.68 rows=531 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
         ->  Seq Scan on payment_p2007_03 payment  (cost=0.00..126.66 rows=1268 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
         ->  Seq Scan on payment_p2007_04 payment  (cost=0.00..151.31 rows=1557 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
         ->  Seq Scan on payment_p2007_05 payment  (cost=0.00..4.73 rows=78 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
         ->  Seq Scan on payment_p2007_06 payment  (cost=0.00..29.95 rows=739 width=0)
               Filter: ((amount <= 1::numeric) OR (amount >= 8::numeric))
(16 rows)




QUERY #3
--------
dvdrental=# EXPLAIN SELECT customer_id, payment_id, amount FROM payment WHERE amount BETWEEN 5 AND 9 LIMIT 20;
                                           QUERY PLAN
------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..2.34 rows=20 width=14)
   ->  Result  (cost=0.00..420.63 rows=3600 width=14)
         ->  Append  (cost=0.00..420.63 rows=3600 width=14)
               ->  Seq Scan on payment  (cost=0.00..29.95 rows=7 width=17)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
               ->  Seq Scan on payment_p2007_01 payment  (cost=0.00..26.36 rows=242 width=14)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
               ->  Seq Scan on payment_p2007_02 payment  (cost=0.00..51.68 rows=506 width=14)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
               ->  Seq Scan on payment_p2007_03 payment  (cost=0.00..126.66 rows=1290 width=14)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
               ->  Seq Scan on payment_p2007_04 payment  (cost=0.00..151.31 rows=1535 width=14)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
               ->  Seq Scan on payment_p2007_05 payment  (cost=0.00..4.73 rows=13 width=13)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
               ->  Seq Scan on payment_p2007_06 payment  (cost=0.00..29.95 rows=7 width=17)
                     Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
(17 rows)



QUERY #3 WITH LIMIT SPECIFIED
-----------------------------
dvdrental=#
dvdrental=# EXPLAIN SELECT customer_id, payment_id, amount FROM payment WHERE amount BETWEEN 5 AND 9;
                                        QUERY PLAN
------------------------------------------------------------------------------------------
 Result  (cost=0.00..420.63 rows=3600 width=14)
   ->  Append  (cost=0.00..420.63 rows=3600 width=14)
         ->  Seq Scan on payment  (cost=0.00..29.95 rows=7 width=17)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
         ->  Seq Scan on payment_p2007_01 payment  (cost=0.00..26.36 rows=242 width=14)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
         ->  Seq Scan on payment_p2007_02 payment  (cost=0.00..51.68 rows=506 width=14)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
         ->  Seq Scan on payment_p2007_03 payment  (cost=0.00..126.66 rows=1290 width=14)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
         ->  Seq Scan on payment_p2007_04 payment  (cost=0.00..151.31 rows=1535 width=14)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
         ->  Seq Scan on payment_p2007_05 payment  (cost=0.00..4.73 rows=13 width=13)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
         ->  Seq Scan on payment_p2007_06 payment  (cost=0.00..29.95 rows=7 width=17)
               Filter: ((amount >= 5::numeric) AND (amount <= 9::numeric))
(16 rows)

dvdrental=#
















Question 4: What is the difference between the plans for the Partitioned Table and the Union Query? 
Why do you think the difference exists?
===================================================================================================

The total projected cost of a partitioned scan (106.49) is lower than that of the Union scan (129.76) 

The optimized partitioned scan completes a filtered scan of the named tables followed by a scan to filter on 
payment before executing a final hash aggregate step.  The Union query is very specific and scans both 
named tables before appending them into one. Once appended, the table is hash aggregated twice to reduce the
number of rows to fit the specifics of the query.

Partitioning splits the one large table into smaller pieces and query performance is well increased.
When queries access a large percentage of the single partition, performance is improved
via the sequential scan of that partition instead of the need to use an index and having to do random access 
reads scattered across the whole table.

UNION effectively appends the result of query  payment_p2007_01 to the result of payment_p2007_02 
(although there is no guarantee that this is the order in which the rows are actually returned).


dvdrental=# EXPLAIN SELECT customer_id, sum(amount) FROM payment
WHERE payment_date <= '2007-02-01 00:00:00'::timestamp WITHOUT time zone
GROUP BY customer_id;
                                         QUERY PLAN
--------------------------------------------------------------------------------------------
 HashAggregate  (cost=103.99..106.49 rows=200 width=11)
   ->  Append  (cost=0.00..95.99 rows=1601 width=11)
         ->  Seq Scan on payment  (cost=0.00..26.62 rows=443 width=13)
               Filter: (payment_date <= '2007-02-01 00:00:00'::timestamp without time zone)
         ->  Seq Scan on payment_p2007_01 payment  (cost=0.00..23.46 rows=1157 width=10)
               Filter: (payment_date <= '2007-02-01 00:00:00'::timestamp without time zone)
         ->  Seq Scan on payment_p2007_02 payment  (cost=0.00..45.90 rows=1 width=10)
               Filter: (payment_date <= '2007-02-01 00:00:00'::timestamp without time zone)
(8 rows)

dvdrental=#


dvdrental=# EXPLAIN SELECT u.customer_id, sum(u.amount) FROM (
SELECT * FROM payment_p2007_01
UNION
SELECT * FROM payment_p2007_02)u
WHERE payment_date <= '2007-02-01 00:00:00'::timestamp WITHOUT time zone
GROUP BY u.customer_id
;
                                            QUERY PLAN
--------------------------------------------------------------------------------------------------
 HashAggregate  (cost=127.26..129.76 rows=200 width=13)
   ->  HashAggregate  (cost=98.31..109.89 rows=1158 width=28)
         ->  Append  (cost=0.00..80.94 rows=1158 width=28)
               ->  Seq Scan on payment_p2007_01  (cost=0.00..23.46 rows=1157 width=28)
                     Filter: (payment_date <= '2007-02-01 00:00:00'::timestamp without time zone)
               ->  Seq Scan on payment_p2007_02  (cost=0.00..45.90 rows=1 width=28)
                     Filter: (payment_date <= '2007-02-01 00:00:00'::timestamp without time zone)
(7 rows)

dvdrental=#











Question 5: What Join algorithm is used for the inner join?
===========================================================

Join algorithem when "Limit 20: is specified:  Nested Loop with filter (public.payment.customer_id = customer.customer_id)
Join algorithem when "Limit 20: is NOT specified:  Hash with condition (public.payment.customer_id = customer.customer_id)



dvdrental=# EXPLAIN SELECT customer.customer_id, first_name, last_name, email, amount, payment_date FROM customer
INNER JOIN payment ON payment.customer_id = customer.customer_id LIMIT 20;
                                                               QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..2.85 rows=20 width=65)
   ->  Nested Loop  (cost=0.00..2661.81 rows=18709 width=65)
         Join Filter: (customer.customer_id = public.payment.customer_id)
         ->  Seq Scan on customer  (cost=0.00..14.99 rows=599 width=49)
         ->  Append  (cost=0.00..3.91 rows=41 width=19)
               ->  Index Scan using idx_fk_customer_id on payment  (cost=0.00..0.45 rows=7 width=21)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
               ->  Index Scan using idx_fk_payment_p2007_01_customer_id on payment_p2007_01 payment  (cost=0.00..0.39 rows=2 width=18)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
               ->  Index Scan using idx_fk_payment_p2007_02_customer_id on payment_p2007_02 payment  (cost=0.00..0.51 rows=4 width=18)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
               ->  Index Scan using idx_fk_payment_p2007_03_customer_id on payment_p2007_03 payment  (cost=0.00..0.85 rows=9 width=18)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
               ->  Index Scan using idx_fk_payment_p2007_04_customer_id on payment_p2007_04 payment  (cost=0.00..0.96 rows=11 width=18)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
               ->  Index Scan using idx_fk_payment_p2007_05_customer_id on payment_p2007_05 payment  (cost=0.00..0.29 rows=1 width=17)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
               ->  Index Scan using idx_fk_payment_p2007_06_customer_id on payment_p2007_06 payment  (cost=0.00..0.45 rows=7 width=21)
                     Index Cond: (public.payment.customer_id = customer.customer_id)
(19 rows)

dvdrental=# EXPLAIN SELECT customer.customer_id, first_name, last_name, email, amount, payment_date FROM customer
INNER JOIN payment ON payment.customer_id = customer.customer_id;
                                        QUERY PLAN
------------------------------------------------------------------------------------------
 Hash Join  (cost=22.48..606.82 rows=18709 width=65)
   Hash Cond: (public.payment.customer_id = customer.customer_id)
   ->  Append  (cost=0.00..327.09 rows=18709 width=18)
         ->  Seq Scan on payment  (cost=0.00..23.30 rows=1330 width=21)
         ->  Seq Scan on payment_p2007_01 payment  (cost=0.00..20.57 rows=1157 width=18)
         ->  Seq Scan on payment_p2007_02 payment  (cost=0.00..40.12 rows=2312 width=18)
         ->  Seq Scan on payment_p2007_03 payment  (cost=0.00..98.44 rows=5644 width=18)
         ->  Seq Scan on payment_p2007_04 payment  (cost=0.00..117.54 rows=6754 width=18)
         ->  Seq Scan on payment_p2007_05 payment  (cost=0.00..3.82 rows=182 width=17)
         ->  Seq Scan on payment_p2007_06 payment  (cost=0.00..23.30 rows=1330 width=21)
   ->  Hash  (cost=14.99..14.99 rows=599 width=49)
         ->  Seq Scan on customer  (cost=0.00..14.99 rows=599 width=49)
(12 rows)

dvdrental=#
